default:
  tags:
    - apap

workflow:
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == 'development-3'

before_script:
  - docker info
  - javac -version

variables:
  IMAGE_OPENJDK_GRADLE: gradle:7 .3.3-jdk17-alpine
  IMAGE_DOCKER_DIND: docker:20.10.16

stages:
  - build-user
  - build-image-user
  - publish-image-user
  - build-order
  - build-image-order
  - publish-image-order
  - build-catalog
  - build-image-catalog
  - publish-image-catalog
  - build-frontend
  - build-image-frontend
  - publish-image-frontend
  - deploy

build-user:
  image: $IMAGE_OPENJDK_GRADLE
  stage: build-user
  script:
    - echo "Compiling the code..."
    - cd $CI_PROJECT_DIR/user
    - sh gradlew clean assemble
    - |
      echo "Creating .env file inside user folder..."
      echo "DATABASE_URL=$USER_DATABASE_URL" >> .env
      echo "DATABASE_USERNAME=$DATABASE_USERNAME" >> .env
      echo "DATABASE_PASSWORD=$DATABASE_PASSWORD" >> .env
      echo "JWT_SECRET=$JWT_SECRET" >> .env
      echo "JWT_EXPIRES_IN=$JWT_EXPIRES_IN" >> .env
    - cat .env
  artifacts:
    paths:
      - user/build/libs/tk_b_tha_24_user-0.0.1-SNAPSHOT.jar
      - user/.env

build-image-user:
  stage: build-image-user
  script:
    - echo "Building Docker Image..."
    - cd $CI_PROJECT_DIR/user
    - docker build -t $REGISTRY_SERVER/moreno.rassya/tk_b_tha_24_user:$CI_COMMIT_SHORT_SHA .
    - docker build -t $REGISTRY_SERVER/moreno.rassya/tk_b_tha_24_user:latest .

publish-image-user:
  stage: publish-image-user
  script:
    - echo "Publishing Docker Image..."
    - cd $CI_PROJECT_DIR/user
    - echo $REGISTRY_SERVER
    - echo $REGISTRY_PASSWORD | docker login --username $REGISTRY_USERNAME --password-stdin $REGISTRY_SERVER
    - docker push $REGISTRY_SERVER/moreno.rassya/tk_b_tha_24_user:$CI_COMMIT_SHORT_SHA
    - docker push $REGISTRY_SERVER/moreno.rassya/tk_b_tha_24_user:latest

build-order:
  image: $IMAGE_OPENJDK_GRADLE
  stage: build-order
  script:
    - echo "Compiling the code..."
    - cd $CI_PROJECT_DIR/order
    - sh gradlew clean assemble
    - |
      echo "Creating .env file inside order folder..."
      echo "DATABASE_URL=$ORDER_DATABASE_URL" >> .env
      echo "DATABASE_USERNAME=$DATABASE_USERNAME" >> .env
      echo "DATABASE_PASSWORD=$DATABASE_PASSWORD" >> .env
      echo "JWT_SECRET=$JWT_SECRET" >> .env
      echo "JWT_EXPIRES_IN=$JWT_EXPIRES_IN" >> .env
    - cat .env
  artifacts:
    paths:
      - order/build/libs/tk_b_tha_24_order-0.0.1-SNAPSHOT.jar
      - order/.env

build-image-order:
  stage: build-image-order
  script:
    - echo "Building Docker Image..."
    - cd $CI_PROJECT_DIR/order
    - docker build -t $REGISTRY_SERVER/moreno.rassya/tk_b_tha_24_order:$CI_COMMIT_SHORT_SHA .
    - docker build -t $REGISTRY_SERVER/moreno.rassya/tk_b_tha_24_order:latest .

publish-image-order:
  stage: publish-image-order
  script:
    - echo "Publishing Docker Image..."
    - cd $CI_PROJECT_DIR/order
    - echo $REGISTRY_SERVER
    - echo $REGISTRY_PASSWORD | docker login --username $REGISTRY_USERNAME --password-stdin $REGISTRY_SERVER
    - docker push $REGISTRY_SERVER/moreno.rassya/tk_b_tha_24_order:$CI_COMMIT_SHORT_SHA
    - docker push $REGISTRY_SERVER/moreno.rassya/tk_b_tha_24_order:latest

build-catalog:
  image: $IMAGE_OPENJDK_GRADLE
  stage: build-catalog
  script:
    - echo "Compiling the code..."
    - cd $CI_PROJECT_DIR/catalog
    - sh gradlew clean assemble
    - |
      echo "Creating .env file inside catalog folder..."
      echo "DATABASE_URL=$catalog_DATABASE_URL" >> .env
      echo "DATABASE_USERNAME=$DATABASE_USERNAME" >> .env
      echo "DATABASE_PASSWORD=$DATABASE_PASSWORD" >> .env
      echo "JWT_SECRET=$JWT_SECRET" >> .env
      echo "JWT_EXPIRES_IN=$JWT_EXPIRES_IN" >> .env
    - cat .env
  artifacts:
    paths:
      - catalog/build/libs/tk_b_tha_24_catalog-0.0.1-SNAPSHOT.jar
      - catalog/.env

build-image-catalog:
  stage: build-image-catalog
  script:
    - echo "Building Docker Image..."
    - cd $CI_PROJECT_DIR/catalog
    - docker build -t $REGISTRY_SERVER/moreno.rassya/tk_b_tha_24_catalog:$CI_COMMIT_SHORT_SHA .
    - docker build -t $REGISTRY_SERVER/moreno.rassya/tk_b_tha_24_catalog:latest .

publish-image-catalog:
  stage: publish-image-catalog
  script:
    - echo "Publishing Docker Image..."
    - cd $CI_PROJECT_DIR/catalog
    - echo $REGISTRY_SERVER
    - echo $REGISTRY_PASSWORD | docker login --username $REGISTRY_USERNAME --password-stdin $REGISTRY_SERVER
    - docker push $REGISTRY_SERVER/moreno.rassya/tk_b_tha_24_catalog:$CI_COMMIT_SHORT_SHA
    - docker push $REGISTRY_SERVER/moreno.rassya/tk_b_tha_24_catalog:latest

build-frontend:
  image: $IMAGE_OPENJDK_GRADLE
  stage: build-frontend
  script:
    - echo "Compiling the code..."
    - cd $CI_PROJECT_DIR/frontend
    - sh gradlew clean assemble
    - |
      echo "Creating .env file inside frontend folder..."
      echo "CATALOG_SERVICE_URL=$catalog_SERVICE_URL" >> .env
      echo "ORDER_SERVICE_URL=$ORDER_SERVICE_URL" >> .env
      echo "USER_SERVICE_URL=$USER_SERVICE_URL" >> .env
    - cat .env
  artifacts:
    paths:
      - frontend/build/libs/frontend-0.0.1-SNAPSHOT.jar
      - frontend/.env

build-image-frontend:
  stage: build-image-frontend
  script:
    - echo "Building Docker Image..."
    - cd $CI_PROJECT_DIR/frontend
    - docker build -t $REGISTRY_SERVER/moreno.rassya/tk_b_tha_24_frontend:$CI_COMMIT_SHORT_SHA .
    - docker build -t $REGISTRY_SERVER/moreno.rassya/tk_b_tha_24_frontend:latest .

publish-image-frontend:
  stage: publish-image-frontend
  script:
    - echo "Publishing Docker Image..."
    - cd $CI_PROJECT_DIR/frontend
    - echo $REGISTRY_SERVER
    - echo $REGISTRY_PASSWORD | docker login --username $REGISTRY_USERNAME --password-stdin $REGISTRY_SERVER
    - docker push $REGISTRY_SERVER/moreno.rassya/tk_b_tha_24_frontend:$CI_COMMIT_SHORT_SHA
    - docker push $REGISTRY_SERVER/moreno.rassya/tk_b_tha_24_frontend:latest

deploy:
  stage: deploy
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$DEPLOY_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config

  script:
    - echo "Deploy to server..."
    - ssh "${DEPLOY_USERNAME}@${DEPLOY_SERVER}" "mkdir -p ~/tk-apap-24/catalog"
    - ssh "${DEPLOY_USERNAME}@${DEPLOY_SERVER}" "mkdir -p ~/tk-apap-24/user"
    - ssh "${DEPLOY_USERNAME}@${DEPLOY_SERVER}" "mkdir -p ~/tk-apap-24/order"
    - ssh "${DEPLOY_USERNAME}@${DEPLOY_SERVER}" "mkdir -p ~/tk-apap-24/frontend"
    - rsync -rahv $CI_PROJECT_DIR/catalog/.env "${DEPLOY_USERNAME}@${DEPLOY_SERVER}:~/tk-apap-24/catalog/"
    - rsync -rahv $CI_PROJECT_DIR/user/.env "${DEPLOY_USERNAME}@${DEPLOY_SERVER}:~/tk-apap-24/user/"
    - rsync -rahv $CI_PROJECT_DIR/order/.env "${DEPLOY_USERNAME}@${DEPLOY_SERVER}:~/tk-apap-24/order/"
    - rsync -rahv $CI_PROJECT_DIR/frontend/.env "${DEPLOY_USERNAME}@${DEPLOY_SERVER}:~/tk-apap-24/frontend/"
    - rsync -rahv $CI_PROJECT_DIR/docker-compose-deploy.yml "${DEPLOY_USERNAME}@${DEPLOY_SERVER}:~/tk-apap-24/"
    - ssh "${DEPLOY_USERNAME}@${DEPLOY_SERVER}" "cd ~/tk-apap-24/ && docker-compose -f docker-compose-deploy.yml down && docker-compose -f docker-compose-deploy.yml pull && docker-compose -f docker-compose-deploy.yml up -d"
